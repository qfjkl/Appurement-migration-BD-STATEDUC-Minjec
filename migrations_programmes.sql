-- =============================================
-- MIGRATIONS POUR LES INDICATEURS DE PROGRAMMES
-- =============================================

-- APPROCHE SIMPLIFIEE:
-- 1. Créer la table TYPE_INDICATEURS qui consolide tous les indicateurs
-- 2. Migrer les données des tables sources vers TYPE_INDICATEURS
-- 3. Utiliser des JOIN directs dans les migrations (sans vues complexes)
-- 4. Les migrations utilisent TYPE_INDICATEURS.CODE_TYPE_INDICATEURS comme référence

-- =============================================
-- TABLE TYPE_PROGRAMMES
-- =============================================
IF OBJECT_ID('TYPE_PROGRAMMES') IS NULL
BEGIN
CREATE TABLE TYPE_PROGRAMMES (
    CODE_TYPE_PROGRAMMES TINYINT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    LIBELLE_TYPE_PROGRAMMES NVARCHAR(100) NOT NULL UNIQUE
);
END

INSERT INTO TYPE_PROGRAMMES
VALUES
('Programme 144'),
('Programme 145'),
('Programme 146'),
('Programme 147');

-- =============================================
-- TABLE TYPE_CATEGORIES_PROGRAMMES
-- =============================================
IF OBJECT_ID('TYPE_CATEGORIES_PROGRAMMES') IS NULL
BEGIN
CREATE TABLE TYPE_CATEGORIES_PROGRAMMES (
    CODE_TYPE_CATEGORIES_PROGRAMMES TINYINT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    LIBELLE_TYPE_CATEGORIES_PROGRAMMES NVARCHAR(50) NOT NULL UNIQUE
);
END

INSERT INTO TYPE_CATEGORIES_PROGRAMMES
VALUES
('GENRE'),
('NON GENRE');

-- =============================================
-- TABLE TYPE_INDICATEURS (CONSOLIDATION)
-- =============================================
IF OBJECT_ID('TYPE_INDICATEURS') IS NULL
BEGIN
CREATE TABLE TYPE_INDICATEURS (
    CODE_TYPE_INDICATEURS INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    LIBELLE_TYPE_INDICATEURS NVARCHAR(400) NOT NULL UNIQUE,
    ORDRE_TYPE_INDICATEURS INT NOT NULL,
    DATE_CREATION DATETIME2 DEFAULT GETDATE(),
    DATE_MODIFICATION DATETIME2 DEFAULT GETDATE()
);
END;

-- =============================================
-- MIGRATION DES INDICATEURS VERS TYPE_INDICATEURS
-- =============================================

-- Migration des indicateurs de TYPE_INDICATEUR (seulement ceux avec des données)
-- Utilisation de ROW_NUMBER() pour gérer les doublons de libellés
WITH IndicateursAvecDonnees AS (
    SELECT DISTINCT
        ti.LIBELLE_TYPE_INDICATEUR,
        ti.ORDRE_TYPE_INDICATEUR,
        ti.CODE_TYPE_INDICATEUR,
        ROW_NUMBER() OVER (PARTITION BY ti.LIBELLE_TYPE_INDICATEUR ORDER BY ti.CODE_TYPE_INDICATEUR) as rn
    FROM TYPE_INDICATEUR ti
    INNER JOIN (
        -- Indicateurs utilisés dans INDICATEURS_GENRES_144
        SELECT DISTINCT CODE_TYPE_INDICATEUR FROM INDICATEURS_GENRES_144
        UNION
        -- Indicateurs utilisés dans INDICATEURS_NON_GENRES_144
        SELECT DISTINCT CODE_TYPE_INDICATEUR FROM INDICATEURS_NON_GENRES_144
        UNION
        -- Indicateurs utilisés dans INDICATEURS_GENRES_145
        SELECT DISTINCT CODE_TYPE_INDICATEUR FROM INDICATEURS_GENRES_145
        UNION
        -- Indicateurs utilisés dans INDICATEURS_NON_GENRES_145
        SELECT DISTINCT CODE_TYPE_INDICATEUR FROM INDICATEURS_NON_GENRES_145
        UNION
        -- Indicateurs utilisés dans INDICATEURS_GENRES_146
        SELECT DISTINCT CODE_TYPE_INDICATEUR FROM INDICATEURS_GENRES_146
        UNION
        -- Indicateurs utilisés dans INDICATEURS_NON_GENRES_146
        SELECT DISTINCT CODE_TYPE_INDICATEUR FROM INDICATEURS_NON_GENRES_146
        UNION
        -- Indicateurs utilisés dans INDICATEURS_GENRES_147
        SELECT DISTINCT CODE_TYPE_INDICATEUR FROM INDICATEURS_GENRES_147
        UNION
        -- Indicateurs utilisés dans INDICATEURS_NON_GENRES_147
        SELECT DISTINCT CODE_TYPE_INDICATEUR FROM INDICATEURS_NON_GENRES_147
    ) used_indicators ON used_indicators.CODE_TYPE_INDICATEUR = ti.CODE_TYPE_INDICATEUR
)
INSERT INTO TYPE_INDICATEURS (
    LIBELLE_TYPE_INDICATEURS, 
    ORDRE_TYPE_INDICATEURS
)
SELECT 
    CASE 
        WHEN rn = 1 THEN LIBELLE_TYPE_INDICATEUR
        ELSE LIBELLE_TYPE_INDICATEUR + ' (' + CAST(CODE_TYPE_INDICATEUR AS VARCHAR(10)) + ')'
    END as LIBELLE_TYPE_INDICATEURS,
    ORDRE_TYPE_INDICATEUR
FROM IndicateursAvecDonnees
WHERE NOT EXISTS (
    SELECT 1 FROM TYPE_INDICATEURS ti2 
    WHERE ti2.LIBELLE_TYPE_INDICATEURS = IndicateursAvecDonnees.LIBELLE_TYPE_INDICATEUR
);

-- Migration des indicateurs de TYPE_INDICATEURS_PROG_144 (seulement ceux avec des données)
-- Utilisation de ROW_NUMBER() pour gérer les doublons de libellés
WITH IndicateursProg144AvecDonnees AS (
    SELECT DISTINCT
        tip.LIBELLE_TYPE_INDICATEURS_PROG_144,
        tip.ORDRE_TYPE_INDICATEURS_PROG_144,
        tip.CODE_TYPE_INDICATEURS_PROG_144,
        ROW_NUMBER() OVER (PARTITION BY tip.LIBELLE_TYPE_INDICATEURS_PROG_144 ORDER BY tip.CODE_TYPE_INDICATEURS_PROG_144) as rn
    FROM TYPE_INDICATEURS_PROG_144 tip
    INNER JOIN (
        -- Indicateurs utilisés dans VALEURS_INDICATEURS_GENRES_PROG_144
        SELECT DISTINCT CODE_TYPE_INDICATEURS_PROG_144 FROM VALEURS_INDICATEURS_GENRES_PROG_144
        UNION
        -- Indicateurs utilisés dans VALEURS_INDICATEURS_NON_GENRES_PROG_144
        SELECT DISTINCT CODE_TYPE_INDICATEURS_PROG_144 FROM VALEURS_INDICATEURS_NON_GENRES_PROG_144
    ) used_indicators ON used_indicators.CODE_TYPE_INDICATEURS_PROG_144 = tip.CODE_TYPE_INDICATEURS_PROG_144
)
INSERT INTO TYPE_INDICATEURS (
    LIBELLE_TYPE_INDICATEURS, 
    ORDRE_TYPE_INDICATEURS
)
SELECT 
    CASE 
        WHEN rn = 1 THEN LIBELLE_TYPE_INDICATEURS_PROG_144
        ELSE LIBELLE_TYPE_INDICATEURS_PROG_144 + ' (PROG144-' + CAST(CODE_TYPE_INDICATEURS_PROG_144 AS VARCHAR(10)) + ')'
    END as LIBELLE_TYPE_INDICATEURS,
    ORDRE_TYPE_INDICATEURS_PROG_144
FROM IndicateursProg144AvecDonnees
WHERE NOT EXISTS (
    SELECT 1 FROM TYPE_INDICATEURS ti2 
    WHERE ti2.LIBELLE_TYPE_INDICATEURS = IndicateursProg144AvecDonnees.LIBELLE_TYPE_INDICATEURS_PROG_144
);

-- Migration des indicateurs de TYPE_INDICATEURS_PROG_145 (seulement ceux avec des données)
-- Utilisation de ROW_NUMBER() pour gérer les doublons de libellés
WITH IndicateursProg145AvecDonnees AS (
    SELECT DISTINCT
        tip.LIBELLE_TYPE_INDICATEURS_PROG_145,
        tip.ORDRE_TYPE_INDICATEURS_PROG_145,
        tip.CODE_TYPE_INDICATEURS_PROG_145,
        ROW_NUMBER() OVER (PARTITION BY tip.LIBELLE_TYPE_INDICATEURS_PROG_145 ORDER BY tip.CODE_TYPE_INDICATEURS_PROG_145) as rn
    FROM TYPE_INDICATEURS_PROG_145 tip
    INNER JOIN (
        -- Indicateurs utilisés dans VALEURS_INDICATEURS_GENRES_PROG_145
        SELECT DISTINCT CODE_TYPE_INDICATEURS_PROG_145 FROM VALEURS_INDICATEURS_GENRES_PROG_145
        UNION
        -- Indicateurs utilisés dans VALEURS_INDICATEURS_NON_GENRES_PROG_145
        SELECT DISTINCT CODE_TYPE_INDICATEURS_PROG_145 FROM VALEURS_INDICATEURS_NON_GENRES_PROG_145
    ) used_indicators ON used_indicators.CODE_TYPE_INDICATEURS_PROG_145 = tip.CODE_TYPE_INDICATEURS_PROG_145
)
INSERT INTO TYPE_INDICATEURS (
    LIBELLE_TYPE_INDICATEURS, 
    ORDRE_TYPE_INDICATEURS
)
SELECT 
    CASE 
        WHEN rn = 1 THEN LIBELLE_TYPE_INDICATEURS_PROG_145
        ELSE LIBELLE_TYPE_INDICATEURS_PROG_145 + ' (PROG145-' + CAST(CODE_TYPE_INDICATEURS_PROG_145 AS VARCHAR(10)) + ')'
    END as LIBELLE_TYPE_INDICATEURS,
    ORDRE_TYPE_INDICATEURS_PROG_145
FROM IndicateursProg145AvecDonnees
WHERE NOT EXISTS (
    SELECT 1 FROM TYPE_INDICATEURS ti2 
    WHERE ti2.LIBELLE_TYPE_INDICATEURS = IndicateursProg145AvecDonnees.LIBELLE_TYPE_INDICATEURS_PROG_145
);

-- Migration des indicateurs de TYPE_INDICATEURS_PROG_146 (seulement ceux avec des données)
-- Utilisation de ROW_NUMBER() pour gérer les doublons de libellés
WITH IndicateursProg146AvecDonnees AS (
    SELECT DISTINCT
        tip.LIBELLE_TYPE_INDICATEURS_PROG_146,
        tip.ORDRE_TYPE_INDICATEURS_PROG_146,
        tip.CODE_TYPE_INDICATEURS_PROG_146,
        ROW_NUMBER() OVER (PARTITION BY tip.LIBELLE_TYPE_INDICATEURS_PROG_146 ORDER BY tip.CODE_TYPE_INDICATEURS_PROG_146) as rn
    FROM TYPE_INDICATEURS_PROG_146 tip
    INNER JOIN (
        -- Indicateurs utilisés dans VALEURS_INDICATEURS_GENRES_PROG_146
        SELECT DISTINCT CODE_TYPE_INDICATEURS_PROG_146 FROM VALEURS_INDICATEURS_GENRES_PROG_146
        UNION
        -- Indicateurs utilisés dans VALEURS_INDICATEURS_NON_GENRES_PROG_146
        SELECT DISTINCT CODE_TYPE_INDICATEURS_PROG_146 FROM VALEURS_INDICATEURS_NON_GENRES_PROG_146
    ) used_indicators ON used_indicators.CODE_TYPE_INDICATEURS_PROG_146 = tip.CODE_TYPE_INDICATEURS_PROG_146
)
INSERT INTO TYPE_INDICATEURS (
    LIBELLE_TYPE_INDICATEURS, 
    ORDRE_TYPE_INDICATEURS
)
SELECT 
    CASE 
        WHEN rn = 1 THEN LIBELLE_TYPE_INDICATEURS_PROG_146
        ELSE LIBELLE_TYPE_INDICATEURS_PROG_146 + ' (PROG146-' + CAST(CODE_TYPE_INDICATEURS_PROG_146 AS VARCHAR(10)) + ')'
    END as LIBELLE_TYPE_INDICATEURS,
    ORDRE_TYPE_INDICATEURS_PROG_146
FROM IndicateursProg146AvecDonnees
WHERE NOT EXISTS (
    SELECT 1 FROM TYPE_INDICATEURS ti2 
    WHERE ti2.LIBELLE_TYPE_INDICATEURS = IndicateursProg146AvecDonnees.LIBELLE_TYPE_INDICATEURS_PROG_146
);


-- =============================================
-- TABLE DE DIMENSION POUR FACTORISER LES CODES
-- =============================================
CREATE TABLE DIMENSION_PROGRAMMES (
    CODE_DIMENSION_PROGRAMMES INT IDENTITY(1,1) NOT NULL,
    
    -- Codes obligatoires (toujours présents)
    CODE_CENTRE_DELEGATION          INT NOT NULL,
    CODE_TYPE_ANNEE                 TINYINT NOT NULL,
    
    -- Codes optionnels (peuvent être 255 = non applicable)
    CODE_TYPE_INDICATEUR            INT NOT NULL DEFAULT 255,
    CODE_TYPE_AGE                   TINYINT NOT NULL DEFAULT 255,
    CODE_TYPE_PROGRAMMES            TINYINT NOT NULL DEFAULT 255,
    CODE_TYPE_CATEGORIES_PROGRAMMES TINYINT NOT NULL DEFAULT 255,
    
    -- Métadonnées
    DATE_CREATION DATETIME2 DEFAULT GETDATE(),
    DATE_MODIFICATION DATETIME2 DEFAULT GETDATE(),
    
    -- Contraintes de clés étrangères
    CONSTRAINT FK_DIM_PROG_CENTRE_DELEGATION FOREIGN KEY (CODE_CENTRE_DELEGATION) 
        REFERENCES CENTRE_DELEGATION (CODE_CENTRE_DELEGATION),
    CONSTRAINT FK_DIM_PROG_TYPE_ANNEE FOREIGN KEY (CODE_TYPE_ANNEE) 
        REFERENCES TYPE_ANNEE (CODE_TYPE_ANNEE),
    CONSTRAINT FK_DIM_PROG_TYPE_INDICATEUR FOREIGN KEY (CODE_TYPE_INDICATEUR) 
        REFERENCES TYPE_INDICATEURS (CODE_TYPE_INDICATEURS),
    CONSTRAINT FK_DIM_PROG_TYPE_AGE FOREIGN KEY (CODE_TYPE_AGE) 
        REFERENCES TYPE_AGE (CODE_TYPE_AGE),
    CONSTRAINT FK_DIM_PROG_TYPE_PROGRAMMES FOREIGN KEY (CODE_TYPE_PROGRAMMES) 
        REFERENCES TYPE_PROGRAMMES (CODE_TYPE_PROGRAMMES),
    CONSTRAINT FK_DIM_PROG_TYPE_CATEGORIES_PROGRAMMES FOREIGN KEY (CODE_TYPE_CATEGORIES_PROGRAMMES) 
        REFERENCES TYPE_CATEGORIES_PROGRAMMES (CODE_TYPE_CATEGORIES_PROGRAMMES),

    -- Clés
    CONSTRAINT UQ_DIMENSION_PROGRAMMES UNIQUE (CODE_DIMENSION_PROGRAMMES),
    CONSTRAINT PK_DIMENSION_PROGRAMMES PRIMARY KEY (
        CODE_CENTRE_DELEGATION,
        CODE_TYPE_ANNEE,
        CODE_TYPE_INDICATEUR,
        CODE_TYPE_AGE,
        CODE_TYPE_PROGRAMMES,
        CODE_TYPE_CATEGORIES_PROGRAMMES
    )
);
GO

-- =============================================
-- TABLE EFFECTIFS_PROGRAMMES SIMPLIFIÉE
-- =============================================
CREATE TABLE EFFECTIFS_PROGRAMMES (
    CODE_EFFECTIFS_PROGRAMMES INT IDENTITY(1,1) NOT NULL,
    CODE_DIMENSION_PROGRAMMES INT NOT NULL,
    -- Effectifs
    NB_HOMMES INT NOT NULL DEFAULT 0,
    NB_FEMMES INT NOT NULL DEFAULT 0,
    NB_TOTAL INT NULL DEFAULT 0,
    ESTIMATION TINYINT NULL,
 
    -- Clé étrangère vers la dimension
    CONSTRAINT FK_EFFECTIFS_PROG_DIMENSION FOREIGN KEY (CODE_DIMENSION_PROGRAMMES) 
        REFERENCES DIMENSION_PROGRAMMES (CODE_DIMENSION_PROGRAMMES),

    CONSTRAINT PK_EFFECTIFS_PROGRAMMES PRIMARY KEY (
        CODE_EFFECTIFS_PROGRAMMES,
        CODE_DIMENSION_PROGRAMMES
    )
);

-- =============================================
-- 1. MIGRATION INDICATEURS_GENRES_144
-- =============================================

-- Pré-populer la table de dimension pour INDICATEURS_GENRES_144
INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, CODE_TYPE_ANNEE, CODE_TYPE_INDICATEUR,
    CODE_TYPE_AGE, CODE_TYPE_PROGRAMMES, CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT
    s.CODE_CENTRE_DELEGATION,
    s.CODE_TYPE_ANNEE,
    ti.CODE_TYPE_INDICATEURS as CODE_TYPE_INDICATEUR,
    255 as CODE_TYPE_AGE,
    1 as CODE_TYPE_PROGRAMMES, -- Programme 144
    1 as CODE_TYPE_CATEGORIES_PROGRAMMES -- GENRE
FROM [INDICATEURS_GENRES_144] s
INNER JOIN TYPE_INDICATEUR ti_source ON ti_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = ti_source.LIBELLE_TYPE_INDICATEUR
WHERE NOT EXISTS (
    SELECT 1 FROM DIMENSION_PROGRAMMES d
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS
      AND ISNULL(d.CODE_TYPE_AGE, 255) = 255
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 1
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
);

INSERT INTO EFFECTIFS_PROGRAMMES (CODE_DIMENSION_PROGRAMMES, NB_HOMMES, NB_FEMMES, NB_TOTAL, ESTIMATION)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES,
    COALESCE(s.[HOMMES], 0) as NB_HOMMES,
    COALESCE(s.[FEMMES], 0) as NB_FEMMES,
    COALESCE(s.[HOMMES], 0) + COALESCE(s.[FEMMES], 0) as NB_TOTAL,
    0
FROM [INDICATEURS_GENRES_144] s
INNER JOIN TYPE_INDICATEUR ti_source ON ti_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = ti_source.LIBELLE_TYPE_INDICATEUR
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES
    FROM DIMENSION_PROGRAMMES
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS
      AND ISNULL(CODE_TYPE_AGE, 255) = 255
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 1
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
) d;

-- =============================================
-- 2. MIGRATION INDICATEURS_NON_GENRES_144
-- =============================================

-- Pré-populer la table de dimension pour INDICATEURS_NON_GENRES_144
INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, CODE_TYPE_ANNEE, CODE_TYPE_INDICATEUR,
    CODE_TYPE_AGE, CODE_TYPE_PROGRAMMES, CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT
    s.CODE_CENTRE_DELEGATION,
    s.CODE_TYPE_ANNEE,
    ti.CODE_TYPE_INDICATEURS as CODE_TYPE_INDICATEUR,
    255 as CODE_TYPE_AGE,
    1 as CODE_TYPE_PROGRAMMES, -- Programme 144
    2 as CODE_TYPE_CATEGORIES_PROGRAMMES -- NON GENRE
FROM [INDICATEURS_NON_GENRES_144] s
INNER JOIN TYPE_INDICATEUR ti_source ON 
    ti_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = ti_source.LIBELLE_TYPE_INDICATEUR
WHERE NOT EXISTS (
    SELECT 1 FROM DIMENSION_PROGRAMMES d
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS
      AND ISNULL(d.CODE_TYPE_AGE, 255) = 255
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 1
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
);

INSERT INTO EFFECTIFS_PROGRAMMES (CODE_DIMENSION_PROGRAMMES, NB_TOTAL, ESTIMATION)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES,
    COALESCE(s.[NOMBRE], 0) as NB_TOTAL,
    0
FROM [INDICATEURS_NON_GENRES_144] s
INNER JOIN TYPE_INDICATEUR ti_source ON 
    ti_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = ti_source.LIBELLE_TYPE_INDICATEUR
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES
    FROM DIMENSION_PROGRAMMES
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS
      AND ISNULL(CODE_TYPE_AGE, 255) = 255
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 1
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
) d;

-- =============================================
-- 3. MIGRATION INDICATEURS_GENRES_145
-- =============================================

-- Pré-populer la table de dimension pour INDICATEURS_GENRES_145
INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, CODE_TYPE_ANNEE, CODE_TYPE_INDICATEUR,
    CODE_TYPE_AGE, CODE_TYPE_PROGRAMMES, CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT
    s.CODE_CENTRE_DELEGATION,
    s.CODE_TYPE_ANNEE,
    ti.CODE_TYPE_INDICATEURS as CODE_TYPE_INDICATEUR,
    255 as CODE_TYPE_AGE,
    2 as CODE_TYPE_PROGRAMMES, -- Programme 145
    1 as CODE_TYPE_CATEGORIES_PROGRAMMES -- GENRE
FROM [INDICATEURS_GENRES_145] s
INNER JOIN TYPE_INDICATEUR ti_source ON ti_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = ti_source.LIBELLE_TYPE_INDICATEUR
WHERE NOT EXISTS (
    SELECT 1 FROM DIMENSION_PROGRAMMES d
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS
      AND ISNULL(d.CODE_TYPE_AGE, 255) = 255
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 2
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
);

INSERT INTO EFFECTIFS_PROGRAMMES (CODE_DIMENSION_PROGRAMMES, NB_HOMMES, NB_FEMMES, NB_TOTAL, ESTIMATION)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES,
    COALESCE(s.[HOMMES], 0) as NB_HOMMES,
    COALESCE(s.[FEMMES], 0) as NB_FEMMES,
    COALESCE(s.[HOMMES], 0) + COALESCE(s.[FEMMES], 0) as NB_TOTAL,
    0
FROM [INDICATEURS_GENRES_145] s
INNER JOIN TYPE_INDICATEUR ti_source ON 
    ti_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = ti_source.LIBELLE_TYPE_INDICATEUR
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES
    FROM DIMENSION_PROGRAMMES
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS
      AND ISNULL(CODE_TYPE_AGE, 255) = 255
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 2
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
) d;

-- =============================================
-- 4. MIGRATION INDICATEURS_NON_GENRES_145
-- =============================================

INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, 
    CODE_TYPE_ANNEE, 
    CODE_TYPE_INDICATEUR, 
    CODE_TYPE_AGE, 
    CODE_TYPE_PROGRAMMES, 
    CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT 
    s.CODE_CENTRE_DELEGATION, 
    s.CODE_TYPE_ANNEE, 
    ti.CODE_TYPE_INDICATEURS as CODE_TYPE_INDICATEUR, 
    255, 
    2, 
    2
FROM [INDICATEURS_NON_GENRES_145] s
INNER JOIN TYPE_INDICATEUR ti_source ON 
    ti_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = ti_source.LIBELLE_TYPE_INDICATEUR
WHERE NOT EXISTS (
    SELECT 1 
    FROM DIMENSION_PROGRAMMES d 
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(d.CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 2 
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
);

INSERT INTO EFFECTIFS_PROGRAMMES (
    CODE_DIMENSION_PROGRAMMES, 
    NB_TOTAL, 
    ESTIMATION
)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES, 
    COALESCE(s.[NOMBRE], 0) as NB_TOTAL, 
    0
FROM [INDICATEURS_NON_GENRES_145] s
INNER JOIN TYPE_INDICATEUR tip_source ON
    tip_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEUR
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES 
    FROM DIMENSION_PROGRAMMES 
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 2 
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
) d;

-- =============================================
-- 5. MIGRATION INDICATEURS_GENRES_146
-- =============================================

INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, 
    CODE_TYPE_ANNEE, 
    CODE_TYPE_INDICATEUR, 
    CODE_TYPE_AGE, 
    CODE_TYPE_PROGRAMMES, 
    CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT 
    s.CODE_CENTRE_DELEGATION, 
    s.CODE_TYPE_ANNEE, 
    ti.CODE_TYPE_INDICATEURS, 
    255, 
    3, 
    1
FROM [INDICATEURS_GENRES_146] s
INNER JOIN TYPE_INDICATEUR tip_source ON
    tip_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEUR
WHERE NOT EXISTS (
    SELECT 1 
    FROM DIMENSION_PROGRAMMES d 
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(d.CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 3 
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
);

INSERT INTO EFFECTIFS_PROGRAMMES (
    CODE_DIMENSION_PROGRAMMES, 
    NB_HOMMES, 
    NB_FEMMES, 
    NB_TOTAL, 
    ESTIMATION
)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES, 
    COALESCE(s.[HOMMES], 0), 
    COALESCE(s.[FEMMES], 0), 
    COALESCE(s.[HOMMES], 0) + COALESCE(s.[FEMMES], 0), 
    0
FROM [INDICATEURS_GENRES_146] s
INNER JOIN TYPE_INDICATEUR tip_source ON
    tip_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEUR
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES 
    FROM DIMENSION_PROGRAMMES 
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 3 
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
) d;

-- =============================================
-- 6. MIGRATION INDICATEURS_NON_GENRES_146
-- =============================================

INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, 
    CODE_TYPE_ANNEE, 
    CODE_TYPE_INDICATEUR, 
    CODE_TYPE_AGE, 
    CODE_TYPE_PROGRAMMES, 
    CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT 
    s.CODE_CENTRE_DELEGATION, 
    s.CODE_TYPE_ANNEE, 
    ti.CODE_TYPE_INDICATEURS, 
    255, 
    3, 
    2
FROM [INDICATEURS_NON_GENRES_146] s
INNER JOIN TYPE_INDICATEUR tip_source ON
    tip_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEUR
WHERE NOT EXISTS (
    SELECT 1 
    FROM DIMENSION_PROGRAMMES d 
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(d.CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 3 
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
);

INSERT INTO EFFECTIFS_PROGRAMMES (
    CODE_DIMENSION_PROGRAMMES, 
    NB_TOTAL, 
    ESTIMATION
)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES, 
    COALESCE(s.[NOMBRE], 0) as NB_TOTAL, 
    0
FROM [INDICATEURS_NON_GENRES_146] s
INNER JOIN TYPE_INDICATEUR tip_source ON
    tip_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEUR
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES 
    FROM DIMENSION_PROGRAMMES 
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 3 
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
) d;

-- =============================================
-- 7. MIGRATION INDICATEURS_GENRES_147
-- =============================================

INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, 
    CODE_TYPE_ANNEE, 
    CODE_TYPE_INDICATEUR, 
    CODE_TYPE_AGE, 
    CODE_TYPE_PROGRAMMES, 
    CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT 
    s.CODE_CENTRE_DELEGATION, 
    s.CODE_TYPE_ANNEE, 
    ti.CODE_TYPE_INDICATEURS, 
    255, 
    4, 
    1
FROM [INDICATEURS_GENRES_147] s
INNER JOIN TYPE_INDICATEUR tip_source ON
    tip_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEUR
WHERE NOT EXISTS (
    SELECT 1 
    FROM DIMENSION_PROGRAMMES d 
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(d.CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 4 
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
);

INSERT INTO EFFECTIFS_PROGRAMMES (
    CODE_DIMENSION_PROGRAMMES, 
    NB_HOMMES, 
    NB_FEMMES, 
    NB_TOTAL, 
    ESTIMATION
)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES, 
    COALESCE(s.[HOMMES], 0), 
    COALESCE(s.[FEMMES], 0), 
    COALESCE(s.[HOMMES], 0) + COALESCE(s.[FEMMES], 0), 
    0
FROM [INDICATEURS_GENRES_147] s
INNER JOIN TYPE_INDICATEUR tip_source ON
    tip_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEUR
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES 
    FROM DIMENSION_PROGRAMMES 
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 4 
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
) d;

-- =============================================
-- 8. MIGRATION INDICATEURS_NON_GENRES_147
-- =============================================

INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, 
    CODE_TYPE_ANNEE, 
    CODE_TYPE_INDICATEUR, 
    CODE_TYPE_AGE, 
    CODE_TYPE_PROGRAMMES, 
    CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT 
    s.CODE_CENTRE_DELEGATION, 
    s.CODE_TYPE_ANNEE, 
    ti.CODE_TYPE_INDICATEURS, 
    255, 
    4, 
    2
FROM [INDICATEURS_NON_GENRES_147] s
INNER JOIN TYPE_INDICATEUR tip_source ON
    tip_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEUR
WHERE NOT EXISTS (
    SELECT 1 
    FROM DIMENSION_PROGRAMMES d 
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(d.CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 4 
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
);

INSERT INTO EFFECTIFS_PROGRAMMES (
    CODE_DIMENSION_PROGRAMMES, 
    NB_TOTAL, 
    ESTIMATION
)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES, 
    COALESCE(s.[NOMBRE], 0) as NB_TOTAL, 
    0
FROM [INDICATEURS_NON_GENRES_147] s
INNER JOIN TYPE_INDICATEUR tip_source ON
    tip_source.CODE_TYPE_INDICATEUR = s.CODE_TYPE_INDICATEUR
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEUR
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES 
    FROM DIMENSION_PROGRAMMES 
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 4 
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
) d;

-- =============================================
-- 9. MIGRATION VALEURS_INDICATEURS_GENRES_PROG_144
-- =============================================

INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, 
    CODE_TYPE_ANNEE, 
    CODE_TYPE_INDICATEUR, 
    CODE_TYPE_AGE, 
    CODE_TYPE_PROGRAMMES, 
    CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT 
    s.CODE_CENTRE_DELEGATION, 
    s.CODE_TYPE_ANNEE, 
    ti.CODE_TYPE_INDICATEURS as CODE_TYPE_INDICATEUR, 
    s.CODE_TYPE_AGE, 
    1, 
    1
FROM [VALEURS_INDICATEURS_GENRES_PROG_144] s
INNER JOIN TYPE_INDICATEURS_PROG_144 tip_source ON tip_source.CODE_TYPE_INDICATEURS_PROG_144 = s.CODE_TYPE_INDICATEURS_PROG_144
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEURS_PROG_144
WHERE NOT EXISTS (
    SELECT 1 
    FROM DIMENSION_PROGRAMMES d 
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(d.CODE_TYPE_AGE, 255) = s.CODE_TYPE_AGE 
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 1 
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
);

INSERT INTO EFFECTIFS_PROGRAMMES (
    CODE_DIMENSION_PROGRAMMES, 
    NB_HOMMES, 
    NB_FEMMES, 
    NB_TOTAL, 
    ESTIMATION
)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES, 
    COALESCE(s.[HOMMES], 0), 
    COALESCE(s.[FEMMES], 0), 
    COALESCE(s.[HOMMES], 0) + COALESCE(s.[FEMMES], 0), 
    0
FROM [VALEURS_INDICATEURS_GENRES_PROG_144] s
INNER JOIN TYPE_INDICATEURS_PROG_144 tip_source ON
    tip_source.CODE_TYPE_INDICATEURS_PROG_144 = s.CODE_TYPE_INDICATEURS_PROG_144
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEURS_PROG_144
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES 
    FROM DIMENSION_PROGRAMMES 
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(CODE_TYPE_AGE, 255) = s.CODE_TYPE_AGE 
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 1 
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
) d;

-- =============================================
-- 10. MIGRATION VALEURS_INDICATEURS_NON_GENRES_PROG_144
-- =============================================

INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, 
    CODE_TYPE_ANNEE, 
    CODE_TYPE_INDICATEUR, 
    CODE_TYPE_AGE, 
    CODE_TYPE_PROGRAMMES, 
    CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT 
    s.CODE_CENTRE_DELEGATION, 
    s.CODE_TYPE_ANNEE, 
    ti.CODE_TYPE_INDICATEURS, 
    255, 
    1, 
    2
FROM [VALEURS_INDICATEURS_NON_GENRES_PROG_144] s
INNER JOIN TYPE_INDICATEURS_PROG_144 tip_source ON
    tip_source.CODE_TYPE_INDICATEURS_PROG_144 = s.CODE_TYPE_INDICATEURS_PROG_144
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEURS_PROG_144
WHERE NOT EXISTS (
    SELECT 1 
    FROM DIMENSION_PROGRAMMES d 
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(d.CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 1 
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
);

INSERT INTO EFFECTIFS_PROGRAMMES (
    CODE_DIMENSION_PROGRAMMES, 
    NB_TOTAL, 
    ESTIMATION
)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES, 
    COALESCE(s.[NOMBRE], 0) as NB_TOTAL, 
    0
FROM [VALEURS_INDICATEURS_NON_GENRES_PROG_144] s
INNER JOIN TYPE_INDICATEURS_PROG_144 tip_source ON
    tip_source.CODE_TYPE_INDICATEURS_PROG_144 = s.CODE_TYPE_INDICATEURS_PROG_144
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEURS_PROG_144
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES 
    FROM DIMENSION_PROGRAMMES 
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 1 
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
) d;

-- =============================================
-- 11. MIGRATION VALEURS_INDICATEURS_GENRES_PROG_145
-- =============================================

INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, 
    CODE_TYPE_ANNEE, 
    CODE_TYPE_INDICATEUR, 
    CODE_TYPE_AGE, 
    CODE_TYPE_PROGRAMMES, 
    CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT 
    s.CODE_CENTRE_DELEGATION, 
    s.CODE_TYPE_ANNEE, 
    ti.CODE_TYPE_INDICATEURS, 
    255, 
    2, 
    1
FROM [VALEURS_INDICATEURS_GENRES_PROG_145] s
INNER JOIN TYPE_INDICATEURS_PROG_145 tip_source ON
    tip_source.CODE_TYPE_INDICATEURS_PROG_145 = s.CODE_TYPE_INDICATEURS_PROG_145
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEURS_PROG_145
WHERE NOT EXISTS (
    SELECT 1 
    FROM DIMENSION_PROGRAMMES d 
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(d.CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 2 
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
);

INSERT INTO EFFECTIFS_PROGRAMMES (
    CODE_DIMENSION_PROGRAMMES, 
    NB_HOMMES, 
    NB_FEMMES, 
    NB_TOTAL, 
    ESTIMATION
)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES, 
    COALESCE(s.[HOMMES], 0), 
    COALESCE(s.[FEMMES], 0), 
    COALESCE(s.[HOMMES], 0) + COALESCE(s.[FEMMES], 0), 
    0
FROM [VALEURS_INDICATEURS_GENRES_PROG_145] s
INNER JOIN TYPE_INDICATEURS_PROG_145 tip_source ON
    tip_source.CODE_TYPE_INDICATEURS_PROG_145 = s.CODE_TYPE_INDICATEURS_PROG_145
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEURS_PROG_145
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES 
    FROM DIMENSION_PROGRAMMES 
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 2 
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
) d;

-- =============================================
-- 12. MIGRATION VALEURS_INDICATEURS_NON_GENRES_PROG_145
-- =============================================

INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, 
    CODE_TYPE_ANNEE, 
    CODE_TYPE_INDICATEUR, 
    CODE_TYPE_AGE, 
    CODE_TYPE_PROGRAMMES, 
    CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT 
    s.CODE_CENTRE_DELEGATION, 
    s.CODE_TYPE_ANNEE, 
    ti.CODE_TYPE_INDICATEURS, 
    255, 
    2, 
    2
FROM [VALEURS_INDICATEURS_NON_GENRES_PROG_145] s
INNER JOIN TYPE_INDICATEURS_PROG_145 tip_source ON
    tip_source.CODE_TYPE_INDICATEURS_PROG_145 = s.CODE_TYPE_INDICATEURS_PROG_145
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEURS_PROG_145
WHERE NOT EXISTS (
    SELECT 1 
    FROM DIMENSION_PROGRAMMES d 
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(d.CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 2 
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
);

INSERT INTO EFFECTIFS_PROGRAMMES (
    CODE_DIMENSION_PROGRAMMES, 
    NB_TOTAL, 
    ESTIMATION
)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES, 
    COALESCE(s.[NOMBRE], 0) as NB_TOTAL, 
    0
FROM [VALEURS_INDICATEURS_NON_GENRES_PROG_145] s
INNER JOIN TYPE_INDICATEURS_PROG_145 tip_source ON
    tip_source.CODE_TYPE_INDICATEURS_PROG_145 = s.CODE_TYPE_INDICATEURS_PROG_145
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEURS_PROG_145
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES 
    FROM DIMENSION_PROGRAMMES 
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 2 
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
) d;

-- =============================================
-- 13. MIGRATION VALEURS_INDICATEURS_GENRES_PROG_146
-- =============================================

INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, 
    CODE_TYPE_ANNEE, 
    CODE_TYPE_INDICATEUR, 
    CODE_TYPE_AGE, 
    CODE_TYPE_PROGRAMMES, 
    CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT 
    s.CODE_CENTRE_DELEGATION, 
    s.CODE_TYPE_ANNEE, 
    ti.CODE_TYPE_INDICATEURS, 
    s.CODE_TYPE_AGE, 
    3, 
    1
FROM [VALEURS_INDICATEURS_GENRES_PROG_146] s
INNER JOIN TYPE_INDICATEURS_PROG_146 tip_source ON
    tip_source.CODE_TYPE_INDICATEURS_PROG_146 = s.CODE_TYPE_INDICATEURS_PROG_146
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEURS_PROG_146
WHERE NOT EXISTS (
    SELECT 1 
    FROM DIMENSION_PROGRAMMES d 
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(d.CODE_TYPE_AGE, 255) = s.CODE_TYPE_AGE 
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 3 
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
);

INSERT INTO EFFECTIFS_PROGRAMMES (
    CODE_DIMENSION_PROGRAMMES, 
    NB_HOMMES, 
    NB_FEMMES, 
    NB_TOTAL, 
    ESTIMATION
)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES, 
    COALESCE(s.[HOMMES], 0), 
    COALESCE(s.[FEMMES], 0), 
    COALESCE(s.[HOMMES], 0) + COALESCE(s.[FEMMES], 0), 
    0
FROM [VALEURS_INDICATEURS_GENRES_PROG_146] s
INNER JOIN TYPE_INDICATEURS_PROG_146 tip_source ON
    tip_source.CODE_TYPE_INDICATEURS_PROG_146 = s.CODE_TYPE_INDICATEURS_PROG_146
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEURS_PROG_146
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES 
    FROM DIMENSION_PROGRAMMES 
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(CODE_TYPE_AGE, 255) = s.CODE_TYPE_AGE 
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 3 
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 1
) d;

-- =============================================
-- 14. MIGRATION VALEURS_INDICATEURS_NON_GENRES_PROG_146
-- =============================================

INSERT INTO DIMENSION_PROGRAMMES (
    CODE_CENTRE_DELEGATION, 
    CODE_TYPE_ANNEE, 
    CODE_TYPE_INDICATEUR, 
    CODE_TYPE_AGE, 
    CODE_TYPE_PROGRAMMES, 
    CODE_TYPE_CATEGORIES_PROGRAMMES
)
SELECT DISTINCT 
    s.CODE_CENTRE_DELEGATION, 
    s.CODE_TYPE_ANNEE, 
    ti.CODE_TYPE_INDICATEURS, 
    255, 
    3, 
    2
FROM [VALEURS_INDICATEURS_NON_GENRES_PROG_146] s
INNER JOIN TYPE_INDICATEURS_PROG_146 tip_source ON
    tip_source.CODE_TYPE_INDICATEURS_PROG_146 = s.CODE_TYPE_INDICATEURS_PROG_146
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEURS_PROG_146
WHERE NOT EXISTS (
    SELECT 1 
    FROM DIMENSION_PROGRAMMES d 
    WHERE d.CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND d.CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(d.CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(d.CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(d.CODE_TYPE_PROGRAMMES, 255) = 3 
      AND ISNULL(d.CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
);

INSERT INTO EFFECTIFS_PROGRAMMES (
    CODE_DIMENSION_PROGRAMMES, 
    NB_TOTAL, 
    ESTIMATION
)
SELECT 
    d.CODE_DIMENSION_PROGRAMMES, 
    COALESCE(s.[NOMBRE], 0) as NB_TOTAL, 
    0
FROM [VALEURS_INDICATEURS_NON_GENRES_PROG_146] s
INNER JOIN TYPE_INDICATEURS_PROG_146 tip_source ON
    tip_source.CODE_TYPE_INDICATEURS_PROG_146 = s.CODE_TYPE_INDICATEURS_PROG_146
INNER JOIN TYPE_INDICATEURS ti ON 
    ti.LIBELLE_TYPE_INDICATEURS = tip_source.LIBELLE_TYPE_INDICATEURS_PROG_146
CROSS APPLY (
    SELECT CODE_DIMENSION_PROGRAMMES 
    FROM DIMENSION_PROGRAMMES 
    WHERE CODE_CENTRE_DELEGATION = s.CODE_CENTRE_DELEGATION 
      AND CODE_TYPE_ANNEE = s.CODE_TYPE_ANNEE 
      AND ISNULL(CODE_TYPE_INDICATEUR, 255) = ti.CODE_TYPE_INDICATEURS 
      AND ISNULL(CODE_TYPE_AGE, 255) = 255 
      AND ISNULL(CODE_TYPE_PROGRAMMES, 255) = 3 
      AND ISNULL(CODE_TYPE_CATEGORIES_PROGRAMMES, 255) = 2
) d;